const pointer screen_last_row    = $be8 // $0bc0
const pointer screen_row_3       = $878
const pointer screen_player_row  = $8c8 //$0878
const pointer screen_player_prev_row  = $8a0 //$0878

const pointer screen_player_flag_row = $878

const array line0 = ["SKI UNTIL CRASH OR MISS THREE GATES@" scr];
const array line1 = ["LEFT AND RIGHT TO STEER BUTTON TO JUMP@" scr];
const array line2 = ["COLLECT S K I TO RESET MISSES@" scr];
const array line3 = ["PICKUPS F FASTER R SLOWER N NO PENALTY@" scr];
const array line4 = ["BEAT THE HIGH SCORE THREE TIMES@" scr];

// next gate position
byte next_gate_position;
// counter to next gate
byte next_gate_counter;
byte gate_distance;
byte gate_h_distance;
byte last_gate_distance;

// indicator shows next gate
// hidden in water/tree sections
word indicator_position;
byte indicator_visible;

// dont want to increase max speed on every gate
byte speed_toggle;

byte water_animate_counter;
byte current_water_1_index;
array(byte) water1_tiles = [128,129,130,131,132];
byte current_water_2_index;
array(byte) water2_tiles = [136,137,133,134,135];

// gates on screen
const byte GATE_COUNT = 4;
byte next_free_gate;
array(byte) gate_active     = [0,0,0,0];
array(byte) gate_position_y = [0,0,0,0];
array(byte) gate_position_x = [0,0,0,0];


// tiles for a tree
array(byte) tree_row_1 = [BLANK_TILE, TREE1_TILE, TREE2_TILE, BLANK_TILE];
array(byte) tree_row_2 = [TREE3_TILE, TREE4_TILE, TREE5_TILE, TREE6_TILE];
array(byte) tree_row_3 = [TREE7_TILE, TREE8_TILE, TREE9_TILE, TREE10_TILE];
array(byte) tree_row_4 = [TREE11_TILE, TREE12_TILE, TREE13_TILE, TREE14_TILE];
array(byte) tree_row_5 = [BLANK_TILE, TREE15_TILE, TREE16_TILE, BLANK_TILE];


// current tree position
byte tree_position;
// tree section starts at end of water section when tree_counter is zero
byte tree_counter;
// distance between trees
byte tree_distance;
// countdown to end of tree section
byte tree_section_counter;


byte in_tree_section;

byte water_position;
byte water_next_row_tile1;
byte water_next_row_tile1_position;
byte water_next_row_tile2;
byte water_next_row_tile2_position;

// tiles for logs
array(byte) log_row_1 = [LOG1_TILE, LOG2_TILE, LOG3_TILE,LOG4_TILE,LOG5_TILE,LOG6_TILE];
array(byte) log_row_2 = [LOG7_TILE, LOG8_TILE, LOG9_TILE,LOG10_TILE,LOG11_TILE,LOG12_TILE];

byte log_position;
byte log_counter;
byte log_row;


// tiles for snowmen
array(byte) snowman_row_1 = [SNOWMAN_TILE1, SNOWMAN_TILE2];
array(byte) snowman_row_2 = [SNOWMAN_TILE3, SNOWMAN_TILE4];


const byte TRACK_TILE_COUNT = 15;

array(byte) track_tile_used = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
array(byte) track_tile_row =  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];

array(byte) track_tiles = [
  FIRST_TILE + 33,
  FIRST_TILE + 34,
  FIRST_TILE + 35,
  FIRST_TILE + 36,
  FIRST_TILE + 37,
  FIRST_TILE + 38,
  FIRST_TILE + 39,
  FIRST_TILE + 40,
  FIRST_TILE + 41,
  FIRST_TILE + 42,
  FIRST_TILE + 43,
  FIRST_TILE + 44,
  FIRST_TILE + 45,
  FIRST_TILE + 46,
  FIRST_TILE + 47
];

byte left_leg_track_tile;
byte right_leg_track_tile;

byte snowman_position;
byte snowman_counter;
byte snowman_row;


byte water_counter;
byte in_water_section;
byte water_gap_size;
byte water_direction;

byte pickup_position;
byte pickup_counter;
byte pickup_distance;

// > 0 if showing well done message
byte well_done_counter;

byte level;
pointer text_location;

void drawText(pointer text, word location) {
  byte i;
  byte b;
  text_location = location;

  i = 0;
  b = text[i];
  while(b != 0) {
    if(b == 32) { 
      b = FIRST_TILE + 32;
    } else {
      b = b + FIRST_TILE - 64;
    }
    text_location[i] = b;

    i = i + 1;
    b = text[i];
  }
}


void initPlayfield() {
  byte i;

  well_done_counter = 0;

  indicator_visible = 1;
  log_counter = 4;
  log_row = 0;

  tree_counter = 0;
  tree_section_counter = 3;
  in_tree_section = 0;

  water_counter = 160;
  water_direction = 1;
  in_water_section = 0;
  water_gap_size = 15;
  water_next_row_tile1 = 0;
  water_next_row_tile2 = 0;


  pickup_position = 10;
  pickup_counter = 40;
  pickup_distance = 38;

  snowman_counter = 12;

  clearPlayfield();
  drawTitles();
  //init_rand_seed();

  next_gate_position = 10;
  next_gate_counter  = 1;

  next_free_gate = 0;
  gate_distance = 22;
  gate_h_distance = 9;
  //nextGatePosition();
  setNextGatePosition(16);
  speed_toggle = 0;

  current_water_1_index = 0;
  current_water_2_index = 0;
  water_animate_counter = 0;

  level = 0;


  for i,0,to,GATE_COUNT - 1 {
    gate_active[i] = 0;
  }

//  rand_seed = VIC2_D012;

  // player_x.lo;

  water_position = 20;

  for i,0,to,TRACK_TILE_COUNT - 1 {
    track_tile_used[i] = 0;
  }
}

// draw the instructions
void drawTitles() {
  byte b;
  byte i;

  drawText(line0, 0x941);
  drawText(line1, 0x941 + 80);

  text_location = $991 + 80;
  drawText(line2, text_location);
  text_location[8] = S_TILE;
  text_location[10] = K_TILE;
  text_location[12] = I_TILE;

  text_location = $9e1 + 80;
  drawText(line3, text_location);
  text_location[8] = F_TILE;
  text_location[17] = R_TILE;
  text_location[26] = N_TILE;

  text_location = $a81 + 40;
  drawText(line4, text_location);
}


void clearPlayfield() {
  asm {
    ldx #0
    lda #BLANK_TILE
clear_playfield_loop:
    sta SCREEN_ADDR,x
    sta SCREEN_ADDR + $100,x
    sta SCREEN_ADDR + $200,x
    sta SCREEN_ADDR + $300,x
    sta SCREEN_ADDR + $310,x
    inx
    cpx #0
    bne clear_playfield_loop
  }
}

void checkCollisions() {
  byte tile;
  byte i;

  //for i,0,to,2 {
  // trees
  if(invulnerable_counter == 0) {
    //for i,0,to,1 {
      tile = screen_player_row[player_legs_column_x[0]];
      // remove tile == TREE3_TILE , give a bit of leeway
      if(tile == TREE4_TILE || tile == TREE5_TILE || tile == TREE6_TILE || tile == TREE7_TILE || tile == TREE8_TILE || tile == TREE9_TILE || tile == TREE10_TILE || tile == TREE11_TILE || tile == TREE12_TILE || tile == TREE13_TILE || tile == TREE14_TILE || tile == TREE15_TILE || tile == TREE16_TILE) {
        playerCrash();      
      }

    //}

  }
  

  if(player_on_ground == 1) {

    // collisions with ground objects
    if(invulnerable_counter == 0) {

      //for i,0,to,1 {
        tile = screen_player_row[player_legs_column_x[0]];      
          
        if(tile == SNOWMAN_TILE3 || tile == SNOWMAN_TILE4 ||  tile == LOG7_TILE || tile == LOG8_TILE  || tile == LOG9_TILE  || tile == LOG10_TILE || tile == LOG11_TILE || tile == LOG12_TILE || tile == WATER1_TILE || tile == WATER2_TILE ) { //} || tile == TRI1_TILE || tile == TRI2_TILE || tile == TRI3_TILE || tile == TRI4_TILE ) {    
          playerCrash();
        }
      //}
    }

    // collisions with pickups
    if(level != 0) {
      for i,0,to,2 {
        tile = screen_player_row[player_column_x + i];
        if(tile == S_TILE || tile == K_TILE || tile == I_TILE || tile == F_TILE || tile == R_TILE || tile == N_TILE) {
          screen_player_row[player_column_x + i] = BLANK_TILE;
          music_timer[1] = 0;
          music_done[1] = 0;        
          if(tile == S_TILE) {
            has_s = 1;
            music_position[1] = PICKUP_SOUND;

          } else if(tile == K_TILE) {
            has_k = 1;
            music_position[1] = PICKUP_SOUND;
          } else if(tile == I_TILE) {
            has_i = 1;
            music_position[1] = PICKUP_SOUND;
          } else if(tile == F_TILE) {
            // go faster
            increaseDownhillSpeed();
            increaseDownhillSpeed();
            increaseDownhillSpeed();
            increaseDownhillSpeed();
            increaseDownhillSpeed();
            music_position[1] = FASTER_SOUND;

          } else if(tile == R_TILE) {
            // go slower
            if(max_downhill_speed > 23) {
              max_downhill_speed = max_downhill_speed - 6;
            }
            if(downhill_speed.hi > max_downhill_speed) {
              downhill_speed.hi = max_downhill_speed;
            }
            music_position[1] = RESET_SPEED_SOUND;          
          } else if(tile == N_TILE) {
            // invulnerable
            playerInvulnerable();
            music_position[1] = INVULNERABLE_SOUND;
          }
        }
      }
    }
  }

  //}
}
void moveGatesUp() {
  byte i;

  for i,0,to,GATE_COUNT - 1 {
    if(gate_active[i] == 1) {
      gate_position_y[i] = gate_position_y[i] - 1;
      if(gate_position_y[i] == 0) {
        // gate row has reached player
        if(player_column_x >= gate_position_x[i] && player_column_x < (gate_position_x[i] + 5) ) {
          screen_player_flag_row[gate_position_x[i]] = FLAG_OK_TILE;
          screen_player_flag_row[gate_position_x[i] + 4] = FLAG_OK_TILE;
          playerIncreaseScore();


          if(speed_toggle == 2) {
            increaseDownhillSpeed();
            speed_toggle = 0;
          } else {
            
            speed_toggle = speed_toggle + 1;
          }
          music_position[0] = GATE_SOUND;
          music_timer[0] = 0;
          music_done[0] = 0;
        } else {

          playerIncreaseMisses();
        }
        gate_active[i] = 0;
      }
    }
  }
}

void addPickup() {

  
  byte pickup_type;

  if(level == 0) {
    return;
  }

  pickup_type = rand() & %00001111;

  if(pickup_type < 3) {
    pickup_type = S_TILE;
  } else if(pickup_type < 6) {
    pickup_type = K_TILE;
  } else if(pickup_type < 9) {
    pickup_type = I_TILE;
  } else if(pickup_type < 12) {
    pickup_type = F_TILE;
  } else if(pickup_type < 13) {
    pickup_type = R_TILE;
  } else { //if(pickup_type < 12) {
    pickup_type = N_TILE;
  }

  if(screen_last_row[pickup_position] == BLANK_TILE) {
    screen_last_row[pickup_position] = pickup_type;
  }
}

void startWaterSection() {
  if(water_gap_size > 10) {
    water_gap_size = water_gap_size - 1;
  }
//  increaseDownhillSpeed();
  in_water_section = 1;
  water_position = next_gate_position - 5;
  if(water_position < 2) {
    water_position = 2;
  }
  if(water_position > 40 - water_gap_size - 2) {
    water_position = 40 - water_gap_size - 2;
  }
  if(level == 0) {
    water_counter = 100;
  } else {
    water_counter = 160;
  }

}

void endWaterSection() {
  level = level + 1;
  //startMusic(0, NEXT_LEVEL_SOUND);
//  increaseDownhillSpeed();
  increaseDownhillSpeed();

  in_water_section = 0;
  water_counter = 160;
  log_counter = 0;
  next_gate_counter = 20;

  // turn gate indicator back on
  indicator_visible = 1;

  startTreeSection();

}

void drawWater() {
  byte right_side_tile;
  byte left_side_tile;
  byte temp;
  byte i;

  for i,0,to,39 {
    temp = rand();
    
    screen_last_row[i] = WATER2_TILE;
    if(temp < 4) {
      screen_last_row[i] = WAVE1_TILE;
    } else if(temp < 8) {
      screen_last_row[i] = WAVE2_TILE;
    }
  }


  if(water_next_row_tile1 != 0) {
    screen_last_row[water_next_row_tile1_position] = water_next_row_tile1;
  }
  if(water_next_row_tile2 != 0) {
    screen_last_row[water_next_row_tile2_position] = water_next_row_tile2;
  }
  temp = rand();
  right_side_tile = WATER1_TILE;
  if(water_next_row_tile1 != 0) {
    right_side_tile = water_next_row_tile1;
  }
  left_side_tile = WATER_RIGHT_EDGE1;
  water_next_row_tile1 = 0;
  water_next_row_tile2 = 0;

  if(temp > 80) {
    if(water_direction == 0) {
      // water is moving left
      if(water_position > 3) {
        water_position = water_position - 1;
        right_side_tile = TRI4_TILE;
        if(rand() > 128) {
          right_side_tile = right_side_tile + 1;
        }
        water_next_row_tile1 = FIRST_TILE + 76;
        water_next_row_tile1_position = water_position + water_gap_size;

        left_side_tile = TRI2_TILE;
        if(rand() > 128) {
          left_side_tile = left_side_tile + 1;
        }
      } else {
        water_direction = 1;
      }
    } else {
      // water is moving right
      if(water_position < (36 - water_gap_size)) {
        right_side_tile = TRI1_TILE;
        if(rand() > 128) {
//          right_side_tile = right_side_tile + 1;
        }
        left_side_tile = TRI3_TILE;
        if(rand() > 128) {
          left_side_tile = left_side_tile + 1;
        }
        water_next_row_tile2 = FIRST_TILE + 77;
        water_next_row_tile2_position = water_position;
      } else {
        water_direction = 0;
      }
    }    
  }

  //water_position = 20;

  screen_last_row[water_position] = left_side_tile;

  if(water_position > 1) {
    temp = screen_last_row[water_position - 1];
    if(temp == WAVE1_TILE || temp == WAVE2_TILE) {
       screen_last_row[water_position - 1] = WATER2_TILE;
    }
    screen_last_row[water_position - 2] = WATER2_TILE;
  }
  

  for i,1,to,water_gap_size {
    screen_last_row[i + water_position] = BLANK_TILE;
  }

  temp = water_position + water_gap_size;
  screen_last_row[temp] = right_side_tile;
  if(temp < 37) {
    
    if(screen_last_row[temp + 1] == WAVE1_TILE || screen_last_row[temp + 1] == WAVE2_TILE) {
      screen_last_row[temp + 1] = WATER2_TILE;
    }
    screen_last_row[temp + 2] = WATER2_TILE;
  }

  
  if(right_side_tile == WATER1_TILE) {
    screen_last_row[water_position + water_gap_size - 1] = WATER_LEFT_EDGE1;
  }

  if(right_side_tile == TRI1_TILE) {
    water_position = water_position + 1;
  }

}


void coarseScrollTrackTiles() {
  byte i;

  for i,0,to,TRACK_TILE_COUNT-1 {
    if(track_tile_used[i] == 1) {
      track_tile_row[i] = track_tile_row[i] - 1;
      if(track_tile_row[i] == 0) {
        track_tile_used[i] = 0;
      }
    }
  }
}

byte getFreeTrackTile() {
  byte i;
  for i,0,to,TRACK_TILE_COUNT-1 {
    if(track_tile_used[i] == 0) {
      track_tile_used[i] = 1;
      return i;
    }
  }
  return 255;
}

void animateWater() {
  water_animate_counter = water_animate_counter + 1;
  if(water_animate_counter < 10) {
    return;
  }

  water_animate_counter = 0;
  current_water_1_index = current_water_1_index + 1;
  if(current_water_1_index == 5) {
    current_water_1_index = 0;
  }
  copyAnimTile(water1_tiles[current_water_1_index], WAVE1_TILE);

  current_water_2_index = current_water_2_index + 1;
  if(current_water_2_index == 5) {
    current_water_2_index = 0;
  }
  copyAnimTile(water2_tiles[current_water_2_index], WAVE2_TILE);

}

void copyAnimTile(byte fromTile, byte toTile) {
  byte i;
  copy_from = fromTile;
  // multiply by 64
  copy_from = copy_from << 6;
  copy_from = copy_from + TILE_DATA_LOCATION; //copy_from + TILE_PALETTE_LOCATION;
  copy_to = toTile;
  copy_to = copy_to << 6;
  for i,0,to,63 {
    copy_to[i] = copy_from[i];
  }
}

void copyTile(byte fromTile, byte toTile) {
  byte i;
  copy_from = fromTile;
  // multiply by 64
  copy_from = copy_from << 6;
  copy_to = toTile;
  copy_to = copy_to << 6;
  for i,0,to,63 {
    copy_to[i] = copy_from[i];
  }
}

void drawPlayerTrack() {
  if(player_on_ground == 1) {
    drawPixel(player_screen_x);
    drawPixel(player_screen_x + 6);
  }
}

void drawPixel(word x_coordinate) {
  word tile_column;
  byte tile_index;
  byte track_tile_index;
  byte free_tile_index;
  byte tile_x_offset;
  byte tile_y_offset;
  word tile_address;
  

  //x_coordinate = player_screen_x;

//  if(left_leg_track_tile < FIRST_TILE + 33 || left_leg_track_tile > FIRST_TILE + 118) {
//    vic_d020 = vic_d020 + 1;
//    return

//  }

//  left_leg_track_tile = FIRST_TILE + 6;

//  tile_index = left_leg_track_tile;// left_leg_track_tile; // FIRST_TILE + 6;// screen_player_row[5];//player_legs_column_x[0]];

  tile_column = x_coordinate >> 3; //player_legs_column_x[0];
  tile_index = screen_player_prev_row[tile_column.lo];// left_leg_track_tile;// screen_player_row[player_legs_column_x[0]];

  if(tile_index < FIRST_TILE + 33 || tile_index > FIRST_TILE + 33 + TRACK_TILE_COUNT - 1) {

    // need to replace it with a track tile

    // find a free track tile
    track_tile_index = 255;// getFreeTrackTile();  

    //track_tile_index = getFreeTrackTile();
    // using for loop caused problems...
    if(track_tile_used[0] == 0) {
      track_tile_index = 0;
    } else if(track_tile_used[1] == 0) {
      track_tile_index = 1;
    } else if(track_tile_used[2] == 0) {
      track_tile_index = 2;
    } else if(track_tile_used[3] == 0) {
      track_tile_index = 3;
    } else if(track_tile_used[4] == 0) {
      track_tile_index = 4;
    } else if(track_tile_used[5] == 0) {
      track_tile_index = 5;
    } else if(track_tile_used[6] == 0) {
      track_tile_index = 6;
    } else if(track_tile_used[7] == 0) {
      track_tile_index = 7;
    } else if(track_tile_used[8] == 0) {
      track_tile_index = 8;
    } else if(track_tile_used[9] == 0) {
      track_tile_index = 9;
    } else if(track_tile_used[10] == 0) {
      track_tile_index = 10;
    } else if(track_tile_used[11] == 0) {
      track_tile_index = 11;
    } else if(track_tile_used[12] == 0) {
      track_tile_index = 12;
    } else if(track_tile_used[13] == 0) {
      track_tile_index = 13;
    } else if(track_tile_used[14] == 0) {      
      track_tile_index = 14;
    }

    if(track_tile_index == 255) {
      // no free tiles left
      //vic_d020 = vic_d020 + 1;
      return;
    }

    // get the tile index of the track tile
    free_tile_index = track_tiles[track_tile_index];

    // copy current tile into it
    copyTile(tile_index, free_tile_index);    
    // set as the tile drawing into
    tile_index = free_tile_index;

    // replace the tile on the screen with the track tile
    screen_player_prev_row[tile_column.lo] = tile_index;  

    // mark track tile as used and put in the row
    track_tile_used[track_tile_index] = 1;    
    track_tile_row[track_tile_index] = 5;
  }


  tile_address = tile_index;
  tile_address = tile_address << 6;

  // x offset is just the lowest 3 bits
  tile_x_offset = (x_coordinate.lo - 1) & %00000111;

  // y offset is (15 - v_scroll) / 2?
  tile_y_offset = (15 - v_scroll);
  tile_y_offset = tile_y_offset >> 1;

  // pixel address is tile_index * 64 + tile_x_offset + tile_y_offset * 8
  copy_to = 0;
  copy_to = tile_y_offset << 3;
  copy_to = copy_to + tile_x_offset;
  copy_to = copy_to + tile_address;

  copy_to[0] = 37;
}

// draw the next row to scroll up
void playfieldNextRow() {
  byte i

  // move position of all gates up by one row
  moveGatesUp();

  // clear the next row
  for i,0,to,39 {
    screen_last_row[i] = BLANK_TILE;
  }  


  if(well_done_counter > 0) {
    well_done_counter = well_done_counter - 1;
    drawWellDone();
    return;
  }

  // keep track of distance since last gate so dont start water too close
  if(last_gate_distance < 14) {
    last_gate_distance = last_gate_distance + 1;
  }


  if(in_tree_section == 1) {
    drawTreeSection();
  } else {

    if(in_water_section == 0) {
      water_counter = water_counter - 1;
      if(water_counter == 14) {
        indicator_visible = 0;
      }
      if(water_counter == 0) {
        if(last_gate_distance > 13) {
          startWaterSection();
        } else {
          water_counter = 1;
        }
      }
    }

    if(in_water_section == 1) {
      drawWater();
      water_counter = water_counter - 1;
      if(water_counter == 0) {
        endWaterSection();
      }
    }

    if(next_gate_counter == gate_distance) {
      drawGateLine2();
    }

    next_gate_counter = next_gate_counter - 1;

    if(next_gate_counter == 0) {
      if(level > 0 || in_water_section == 0) {
        drawGateLine1();
        next_gate_counter = gate_distance;
      }
      
    }
  }

  if(in_water_section == 0) {
    if( (level > 1 && in_tree_section == 0) || level > 2 ) {

      if(next_gate_counter != 2 && next_gate_counter != 1 && next_gate_counter != gate_distance && next_gate_counter != gate_distance - 1) {
        drawLog();
      }
    }
  }

  pickup_counter = pickup_counter - 1;
  if(pickup_counter == 0) {
    pickup_counter = pickup_distance;
    addPickup();
  }


}



void nextGatePosition() {
  byte temp;
  byte last_gate_position;
  // difference between last gate and next one
  byte h_diff;
  byte gate_offset;
  byte i;

  last_gate_position = next_gate_position;
  h_diff = 0;

  gate_h_distance = 12;
  gate_offset = 11;

  if(level == 0) {
    gate_h_distance = 6;
    gate_offset = 13;
  } 
  if(level > 4) {
    gate_h_distance = 6;
    gate_offset = 14;
  }
  
  temp = 10;
  i = 0;

  while(i < 40 && (h_diff < 3 || temp > gate_h_distance + gate_offset)) {
    i = i + 1;
    temp = rand() & %00001111;
    temp = temp + gate_offset;
    if(last_gate_position > temp) {
      h_diff = last_gate_position - temp;
    } else {
      h_diff = temp - last_gate_position;
    }
  }
  //setNextGatePosition(temp + 11);
  setNextGatePosition(temp);
}


void nextGatePositionOld() {
  byte temp;
  byte dir;

  rand_seed = player_x.lo;

  dir = rand() & %0000001;

  gate_h_distance = 9;

  if(level == 0) {
    gate_h_distance = 7;
  } 
  if(level > 4) {
    gate_h_distance = 6;
  }
  temp = rand() & %00001111;
  //while(temp < 3 && temp > gate_h_distance) {
  while(temp > gate_h_distance) {
    temp = rand() & %0001111;
  }

  if(dir < 128) {
    next_gate_position = next_gate_position - temp;
  } else {
    next_gate_position = next_gate_position + temp;
  }

  if(next_gate_position + 5 > 38) {
    next_gate_position = 38 - 5;
  } else if(next_gate_position < 2) {
    next_gate_position = 2;
  }

  setNextGatePosition(next_gate_position);
//  setNextGatePosition(temp + 20 - gate_h_distance);
}


void setNextGatePosition(byte position) {
  next_gate_position = position; //temp + 11;

  // now work out the indicator position
  indicator_position = next_gate_position << 3;
  indicator_position = indicator_position + 40;

}

void drawIndicator() {
  // set sprite position
  if(indicator_visible == 1) {
    SPRITE_3_POINTER = 22;
    vic_d006 = indicator_position.lo;
    vic_d007 = 234;

    if(indicator_position.hi > 0) {
      vic_d010 = vic_d010 | %00001000;
    } else {
      vic_d010 = vic_d010 & %11110111;
    }

    sprites_enabled = %11111111;

  } else {
    sprites_enabled = %11110111;

  }

}

// draw the first line of a gate
void drawGateLine1() {
  byte temp;

  if(in_water_section == 1) {
    // difference between gap size and gate size
    temp = water_gap_size - 5;
    // divide by 2
    temp = temp >> 1;
    next_gate_position = water_position + temp;
  }

  pickup_position = next_gate_position + 2;

  screen_last_row[next_gate_position] = FLAG_TILE;
  screen_last_row[next_gate_position + 1] = FLAG_POLE1_TILE;
  screen_last_row[next_gate_position + 4] = FLAG_TILE;
  screen_last_row[next_gate_position + 5] = FLAG_POLE1_TILE;

  gate_position_x[next_free_gate] = next_gate_position;
  gate_position_y[next_free_gate] = 22;
  gate_active[next_free_gate] = 1;

  next_free_gate = next_free_gate + 1;
  if(next_free_gate == GATE_COUNT) {
    next_free_gate = 0;
  }

}


// draw the first line of a gate
void drawGateLine2() {
  screen_last_row[next_gate_position + 1] = FLAG_POLE2_TILE;
  screen_last_row[next_gate_position + 5] = FLAG_POLE2_TILE;

  nextGatePosition();
  last_gate_distance = 0;
}


void drawLog() {

  log_counter = log_counter + 1;

  if(log_row == 2) {
    drawObjectLine(log_position, log_row_2, 6);
    log_row = 1;
  }

  if(log_counter >= 20) {
    log_position = rand() & %00001111;
    log_position = log_position + 9;

    if(in_tree_section == 1 && tree_counter < 5) {
      // same line as a tree, trees are 4 tiles wide
      if(log_position < tree_position + 4 && log_position + 5 > tree_position) {
        // overlapping
        if(tree_position < 16) {
          log_position = 24;
        } else {
          log_position = 5;
        }
      }

    }

    drawObjectLine(log_position, log_row_1, 6);
    log_counter = 0;
    log_row = 2;
  }

}


void startTreeSection() {
  in_tree_section = 1;
  pickup_counter = 1;
  tree_section_counter = 26;
  indicator_visible = 0;

  pickup_distance = 21;
}

void endTreeSection() {
  pickup_distance = 38;
  in_tree_section = 0;
  tree_section_counter = 0;
  

}

void drawObjectLine(byte position, pointer data, byte length) {
  byte i;
  for i,0,to,length-1 {
    screen_last_row[position + i] = data[i];
  }
}

void drawTreeSection() {
  byte temp;

  if(level > 1) {
    drawSnowmen();
  }

  if(tree_counter == 0) {
    tree_position = rand() & %00011111;
    temp = rand() & %00000111;
    tree_position = tree_position + temp;
    if(tree_position > 36) {
      tree_position = 35;
    }

    pickup_position = rand() & %00011111;
    pickup_position = pickup_position + 2;

    drawObjectLine(tree_position, tree_row_1, 4);
  } else if(tree_counter == 1) {
    drawObjectLine(tree_position, tree_row_2, 4);
  } else if(tree_counter == 2) {
    drawObjectLine(tree_position, tree_row_3, 4);
  } else if(tree_counter == 3) {
    drawObjectLine(tree_position, tree_row_4, 4);
  } else if(tree_counter == 4) {
    drawObjectLine(tree_position, tree_row_5, 4);
    tree_section_counter = tree_section_counter - 1;
    if(tree_section_counter == 0) {
      endTreeSection();
    }
  }

  tree_counter = tree_counter + 1;

  tree_distance = 9;
  if(level > 1) {
    tree_distance = 7;
  }
  if(level > 3) {
    tree_distance = 5;
  }
  if(tree_counter >= tree_distance) {
    tree_counter = 0;
  }

  if(tree_section_counter == 3) {
    indicator_visible = 1;
  }
}

void drawSnowmen() {
  if(snowman_row == 2) {
    drawObjectLine(snowman_position, snowman_row_2, 2);
    snowman_row = 1;
  }
  if(snowman_counter > 0 && level > 1) {
    snowman_counter = snowman_counter - 1;
    if(snowman_counter == 0) {      
      snowman_position = rand() & %00011111;
      snowman_position = snowman_position + 3;
      drawObjectLine(snowman_position, snowman_row_1, 2);
      snowman_row = 2;
      snowman_counter = 14;
    }
  }
}


void drawWellDone() {
  byte i;
  byte temp;

  for i,0,to,10 {
    temp = rand();
    if(temp < 4) {
      screen_last_row[i] = FLOWER1_TILE;
    } else if(temp < 8) {
      screen_last_row[i] = FLOWER2_TILE;
    } else if(temp < 12) {
      screen_last_row[i] = FLOWER3_TILE;
    } else if(temp < 16) {
      screen_last_row[i] = FLOWER4_TILE;
    }

    temp = rand();
    if(temp < 4) {
      screen_last_row[29 + i] = FLOWER1_TILE;
    } else if(temp < 8) {
      screen_last_row[29 + i] = FLOWER2_TILE;
    } else if(temp < 12) {
      screen_last_row[29 + i] = FLOWER3_TILE;
    } else if(temp < 16) {
      screen_last_row[29 + i] = FLOWER4_TILE;
    }
  }

  if(well_done_counter == 110) {
    screen_last_row[15] = FIRST_TILE + 23;
    screen_last_row[16] = FIRST_TILE + 5;
    screen_last_row[17] = FIRST_TILE + 12;
    screen_last_row[18] = FIRST_TILE + 12;

    screen_last_row[21] = FIRST_TILE + 4;
    screen_last_row[22] = FIRST_TILE + 15;
    screen_last_row[23] = FIRST_TILE + 14;
    screen_last_row[24] = FIRST_TILE + 5;
  }

}
